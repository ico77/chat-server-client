/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.ivica.chat.client;

import hr.ivica.chat.helpers.ItemHolder;
import java.awt.EventQueue;
import java.awt.event.ActionListener;
import java.lang.reflect.InvocationTargetException;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author ivica
 */
public class ChatClientView extends javax.swing.JFrame {

    public ChatClientView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jStartDialog = new javax.swing.JDialog();
        jGreetingLabel = new javax.swing.JLabel();
        jServerURLLabel = new javax.swing.JLabel();
        jServerURLTextField = new javax.swing.JTextField();
        jPortLabel = new javax.swing.JLabel();
        jPortTextField = new javax.swing.JTextField();
        jNicknameLabel = new javax.swing.JLabel();
        jNicknameTextField = new javax.swing.JTextField();
        jConnectButton = new javax.swing.JButton();
        jTestConnectionButton = new javax.swing.JButton();
        jStatusLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jIncomingMessagesTextPane = new javax.swing.JTextPane();
        jInputMessageTextField = new javax.swing.JTextField();
        jSendMessageButton = new javax.swing.JButton();

        jStartDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jStartDialog.setTitle("Server connect information");
        jStartDialog.setModal(true);

        jGreetingLabel.setText(ChatClientView.GREETING);

        jServerURLLabel.setText("Server URL");

        jServerURLTextField.setText("localhost");

        jPortLabel.setText("Port");

        jPortTextField.setText("55555");
        jPortTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                manageJPortTextField();
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                manageJPortTextField();
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });

        jNicknameLabel.setText("Nickname");

        jConnectButton.setText("Connect");
        jConnectButton.setEnabled(false);
        jConnectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jConnectButtonMouseClicked(evt);
            }
        });

        jTestConnectionButton.setText("Test Connection");
        jTestConnectionButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTestConnectionButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jStartDialogLayout = new javax.swing.GroupLayout(jStartDialog.getContentPane());
        jStartDialog.getContentPane().setLayout(jStartDialogLayout);
        jStartDialogLayout.setHorizontalGroup(
            jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jStartDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jStartDialogLayout.createSequentialGroup()
                        .addGroup(jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jServerURLLabel)
                            .addComponent(jPortLabel)
                            .addComponent(jNicknameLabel))
                        .addGap(52, 52, 52)
                        .addGroup(jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jServerURLTextField)
                            .addComponent(jPortTextField)
                            .addComponent(jNicknameTextField))
                        .addContainerGap())
                    .addGroup(jStartDialogLayout.createSequentialGroup()
                        .addComponent(jStatusLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jStartDialogLayout.createSequentialGroup()
                        .addGap(0, 119, Short.MAX_VALUE)
                        .addGroup(jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jStartDialogLayout.createSequentialGroup()
                                .addComponent(jGreetingLabel)
                                .addGap(146, 146, 146))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jStartDialogLayout.createSequentialGroup()
                                .addComponent(jTestConnectionButton)
                                .addGap(18, 18, 18)
                                .addComponent(jConnectButton)
                                .addGap(10, 10, 10))))))
        );
        jStartDialogLayout.setVerticalGroup(
            jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jStartDialogLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jGreetingLabel)
                .addGap(18, 18, 18)
                .addGroup(jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jServerURLLabel)
                    .addComponent(jServerURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPortLabel)
                    .addComponent(jPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNicknameLabel)
                    .addComponent(jNicknameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jStartDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTestConnectionButton)
                    .addComponent(jConnectButton))
                .addGap(18, 18, 18)
                .addComponent(jStatusLabel)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jIncomingMessagesTextPane.setEditable(false);
        jScrollPane1.setViewportView(jIncomingMessagesTextPane);

        jInputMessageTextField.setText("Enter Message");
        jInputMessageTextField.setToolTipText("");
        jInputMessageTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jInputMessageTextFieldFocusGained(evt);
            }
        });
        jInputMessageTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                manageJInputMessageTextField();
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                manageJInputMessageTextField();
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });

        jSendMessageButton.setText("Send Message");
        jSendMessageButton.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jInputMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSendMessageButton))
                    .addComponent(jScrollPane1))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSendMessageButton)
                    .addComponent(jInputMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Hides the start dialog when clicking the connect button.
     *
     * @param evt mouse event that triggered the action
     */
    private void jConnectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jConnectButtonMouseClicked
        jStartDialog.setVisible(false);
    }//GEN-LAST:event_jConnectButtonMouseClicked

    /**
     * Tests the connection to the server.
     *
     * @param evt the mouse event that triggered the action
     */
    private void jTestConnectionButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTestConnectionButtonMouseClicked
        boolean success = ChatClient.testConnection(jServerURLTextField.getText(), Integer.parseInt(jPortTextField.getText()));
        if (success) {
            jStatusLabel.setText("Successfully connected to server ");
            jConnectButton.setEnabled(true);
        } else {
            jStatusLabel.setText("Failed to connected to server ");
            jConnectButton.setEnabled(false);
        }
    }//GEN-LAST:event_jTestConnectionButtonMouseClicked

    /**
     * Clears the input message text field when it gaines focus.
     *
     * @param evt the focus event that triggered the action
     */
    private void jInputMessageTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jInputMessageTextFieldFocusGained
        jInputMessageTextField.setText("");
    }//GEN-LAST:event_jInputMessageTextFieldFocusGained

    /**
     * Manages the components in the start dialog depending whether the port value is a number.
     *
     */
    private void manageJPortTextField() {
        try {
            int port = Integer.parseInt(jPortTextField.getText());
            if (port >= 0 && port <= 65535) {
                jStatusLabel.setText("");
                jTestConnectionButton.setEnabled(true);
            } else {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            jStatusLabel.setText("Value for port needs to be a number in the range 1-65535");
            jTestConnectionButton.setEnabled(false);
            jConnectButton.setEnabled(false);
        }
    }

    /**
     * Manages the components in the start dialog depending whether the port value is a number.
     *
     */
    private void manageJInputMessageTextField() {
        if (jInputMessageTextField.getText().isEmpty()) {
            jSendMessageButton.setEnabled(false);
        } else {
            jSendMessageButton.setEnabled(true);
        }
    }
    
    /**
     * Make the start dialog visible
     *
     */
    public void showStartDialog() {
        jStartDialog.pack();
        jStartDialog.setVisible(true);
    }

    /**
     * Make the start dialog visible
     *
     */
    public void showErrorDialogAndQuit(final Exception e) {
        if (EventQueue.isDispatchThread()) {
            JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            jStartDialog.dispose();
            dispose();
        } else {
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
                        jStartDialog.dispose();
                        dispose();
                    }
                });
            } catch (InterruptedException | InvocationTargetException ex) {
                logger.fatal(ex);
            }
        }
    }

    /**
     * Adds an action listener to the Send Message button
     *
     * @param listener action listener for the Send Message button
     */
    public void addSendMsgListener(ActionListener listener) {
        jSendMessageButton.addActionListener(listener);
    }

    /**
     * Gets the message from the text input control. If the method is not invoked on the EDT, schedule a Runnable on the
     * EDT that will read the message and wait for the result
     */
    public String getMessage() {
        if (EventQueue.isDispatchThread()) {
            return jInputMessageTextField.getText();
        } else {
            final ItemHolder holder = new ItemHolder();
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        holder.set(jInputMessageTextField.getText());
                    }
                });
            } catch (InterruptedException | InvocationTargetException ex) {
                logger.error(ex);
                showErrorDialogAndQuit(ex);
            }
            return (String) holder.get();
        }
    }

    /**
     * Gets the nickname from the text input control. If the method is not invoked on the EDT, schedule a Runnable on the
     * EDT that will read the message and wait for the result
     */
    public String getNickname() {
        if (EventQueue.isDispatchThread()) {
            return jNicknameTextField.getText();
        } else {
            final ItemHolder holder = new ItemHolder();
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        holder.set(jNicknameTextField.getText());
                    }
                });
            } catch (InterruptedException | InvocationTargetException ex) {
                logger.error(ex);
                showErrorDialogAndQuit(ex);
            }
            return (String) holder.get();
        }
    }
    
    /**
     * Gets the Server URL string from the text input control. If the method is not invoked on the EDT, schedule a
     * Runnable on the EDT that will read the value and wait for the result
     */
    public String getServerURL() {
        if (EventQueue.isDispatchThread()) {
            return jServerURLTextField.getText();
        } else {
            final ItemHolder holder = new ItemHolder();
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        holder.set(jServerURLTextField.getText());
                    }
                });
            } catch (InterruptedException | InvocationTargetException ex) {
                logger.error(ex);
                showErrorDialogAndQuit(ex);
            }
            return (String) holder.get();
        }
    }

    /**
     * Gets the server port number from the text input control. If the method is not invoked on the EDT, schedule a
     * Runnable on the EDT that will read the value and wait for the result
     */
    public int getPort() {
        if (EventQueue.isDispatchThread()) {
            return Integer.parseInt(jPortTextField.getText());
        } else {
            final ItemHolder holder = new ItemHolder();
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        holder.set(jPortTextField.getText());
                    }
                });
            } catch (InterruptedException | InvocationTargetException ex) {
                logger.error(ex);
                showErrorDialogAndQuit(ex);
            }
            return Integer.parseInt((String) holder.get());
        }
    }

    /**
     * Appends the message to the document in the text pane. If the method is not invoked on the EDT, schedule a
     * Runnable on the EDT that will read the value and wait for the result
     */
    public void appendIncomingMessage(final String message) {
        if (EventQueue.isDispatchThread()) {
            StyledDocument doc = jIncomingMessagesTextPane.getStyledDocument();
            try {
                doc.insertString(doc.getLength(), message + "\n", null);
            } catch (BadLocationException e) {
                logger.error(e);
                showErrorDialogAndQuit(e);
            }
        } else {
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    @Override
                    public void run() {
                        StyledDocument doc = jIncomingMessagesTextPane.getStyledDocument();
                        try {
                            doc.insertString(doc.getLength(), message + "\n", null);
                        } catch (BadLocationException e) {
                            logger.error(e);
                            showErrorDialogAndQuit(e);
                        }
                    }
                });
            } catch (InterruptedException | InvocationTargetException ex) {
                logger.error(ex);
                showErrorDialogAndQuit(ex);
            }

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            logger.fatal("Exception: {}", ex);
        }
        //</editor-fold>

        final ItemHolder holder = new ItemHolder();

        /* Create and display the form */
        SwingUtilities.invokeAndWait(new Runnable() {
            @Override
            public void run() {
                ChatClientView clientGUI = new ChatClientView();
                clientGUI.setVisible(true);
                clientGUI.showStartDialog();
                holder.set(clientGUI);
            }
        });

        ChatClientView clientGUI = (ChatClientView) holder.get();
        // Create the model/controller class, and start the client listener
        ChatClient client = new ChatClient(clientGUI);
        Thread clientListener = new Thread(client);
        clientListener.setDaemon(true);
        clientListener.start();
    }
    private static final String GREETING = "Welcome to Java Chat";
    private static final Logger logger = LogManager.getLogger(ChatClientView.class.getName());
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jConnectButton;
    private javax.swing.JLabel jGreetingLabel;
    private javax.swing.JTextPane jIncomingMessagesTextPane;
    private javax.swing.JTextField jInputMessageTextField;
    private javax.swing.JLabel jNicknameLabel;
    private javax.swing.JTextField jNicknameTextField;
    private javax.swing.JLabel jPortLabel;
    private javax.swing.JTextField jPortTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jSendMessageButton;
    private javax.swing.JLabel jServerURLLabel;
    private javax.swing.JTextField jServerURLTextField;
    private javax.swing.JDialog jStartDialog;
    private javax.swing.JLabel jStatusLabel;
    private javax.swing.JButton jTestConnectionButton;
    // End of variables declaration//GEN-END:variables
}
